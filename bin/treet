#!/usr/bin/env ruby

require 'treet'

command,*args = ARGV

case command
when 'expand'
  # convert JSON to filetree - single record
  path, root = args
  hash = Treet::Hash.new(path)
  hash.to_repo(root)
  $stderr.puts "Wrote files to directory tree under #{root}"

when 'explode'
  # convert JSON to filetree - multiple records
  path, root, xrefkey = args
  farm = Treet::Farm.plant(:json => path, :root => root, :xref => xrefkey)
  filecount = Dir.glob("#{farm.root}/*").count
  $stderr.puts "Wrote #{filecount} files to #{farm.root}"

when 'import'
  # convert filetree to JSON

  path, xrefkey = args
  raise "usage: treet import root-dir xref-key" unless path && xrefkey

  if File.directory?(path)
    # convert filetree to JSON
    farm = Treet::Farm.new(:root => path, :xref => xrefkey)
    puts JSON.pretty_generate(farm.export)
    # repo = Treet::Repo.new(path, :xref => xrefkey)
    # puts JSON.pretty_generate(repo.to_hash)
  else
    raise "treet import: could not find #{path}"
  end

when 'patch'
  # ingest patches in JSON form & apply to the specified filetree

  root, patchfile, xrefkey = args
  patches = JSON.load(File.open(patchfile))
  farm = Treet::Farm.new(:root => root, :xref => xrefkey)
  farm.patch(patches)

else
  raise "usage: treet expand jsonfile root OR treet explore jsonfile root OR treet import root"
end
